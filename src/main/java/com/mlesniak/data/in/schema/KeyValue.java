/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.mlesniak.data.in.schema;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KeyValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Table\",\"namespace\":\"com.mlesniak.data.in.schema\",\"fields\":[{\"name\":\"year\",\"type\":[\"int\",\"null\"]},{\"name\":\"month\",\"type\":[\"int\",\"null\"]},{\"name\":\"day\",\"type\":[\"int\",\"null\"]},{\"name\":\"key\",\"type\":[\"int\",\"null\"]},{\"name\":\"value\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer year;
  @Deprecated public java.lang.Integer month;
  @Deprecated public java.lang.Integer day;
  @Deprecated public java.lang.Integer key;
  @Deprecated public java.lang.CharSequence value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public KeyValue() {}

  /**
   * All-args constructor.
   */
  public KeyValue(java.lang.Integer year, java.lang.Integer month, java.lang.Integer day, java.lang.Integer key, java.lang.CharSequence value) {
    this.year = year;
    this.month = month;
    this.day = day;
    this.key = key;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return month;
    case 2: return day;
    case 3: return key;
    case 4: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.Integer)value$; break;
    case 1: month = (java.lang.Integer)value$; break;
    case 2: day = (java.lang.Integer)value$; break;
    case 3: key = (java.lang.Integer)value$; break;
    case 4: value = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'month' field.
   */
  public java.lang.Integer getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.Integer value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'day' field.
   */
  public java.lang.Integer getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(java.lang.Integer value) {
    this.day = value;
  }

  /**
   * Gets the value of the 'key' field.
   */
  public java.lang.Integer getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.Integer value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /** Creates a new Table RecordBuilder */
  public static KeyValue.Builder newBuilder() {
    return new KeyValue.Builder();
  }
  
  /** Creates a new Table RecordBuilder by copying an existing Builder */
  public static KeyValue.Builder newBuilder(KeyValue.Builder other) {
    return new KeyValue.Builder(other);
  }
  
  /** Creates a new Table RecordBuilder by copying an existing Table instance */
  public static KeyValue.Builder newBuilder(KeyValue other) {
    return new KeyValue.Builder(other);
  }
  
  /**
   * RecordBuilder for Table instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KeyValue>
    implements org.apache.avro.data.RecordBuilder<KeyValue> {

    private java.lang.Integer year;
    private java.lang.Integer month;
    private java.lang.Integer day;
    private java.lang.Integer key;
    private java.lang.CharSequence value;

    /** Creates a new Builder */
    private Builder() {
      super(KeyValue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(KeyValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.day)) {
        this.day = data().deepCopy(fields()[2].schema(), other.day);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.key)) {
        this.key = data().deepCopy(fields()[3].schema(), other.key);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Table instance */
    private Builder(KeyValue other) {
            super(KeyValue.SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.day)) {
        this.day = data().deepCopy(fields()[2].schema(), other.day);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.key)) {
        this.key = data().deepCopy(fields()[3].schema(), other.key);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'year' field */
    public java.lang.Integer getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public KeyValue.Builder setYear(java.lang.Integer value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'year' field */
    public KeyValue.Builder clearYear() {
      year = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.Integer getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public KeyValue.Builder setMonth(java.lang.Integer value) {
      validate(fields()[1], value);
      this.month = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'month' field */
    public KeyValue.Builder clearMonth() {
      month = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'day' field */
    public java.lang.Integer getDay() {
      return day;
    }
    
    /** Sets the value of the 'day' field */
    public KeyValue.Builder setDay(java.lang.Integer value) {
      validate(fields()[2], value);
      this.day = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'day' field has been set */
    public boolean hasDay() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'day' field */
    public KeyValue.Builder clearDay() {
      day = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'key' field */
    public java.lang.Integer getKey() {
      return key;
    }
    
    /** Sets the value of the 'key' field */
    public KeyValue.Builder setKey(java.lang.Integer value) {
      validate(fields()[3], value);
      this.key = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'key' field has been set */
    public boolean hasKey() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'key' field */
    public KeyValue.Builder clearKey() {
      key = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'value' field */
    public java.lang.CharSequence getValue() {
      return value;
    }
    
    /** Sets the value of the 'value' field */
    public KeyValue.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.value = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'value' field has been set */
    public boolean hasValue() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'value' field */
    public KeyValue.Builder clearValue() {
      value = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public KeyValue build() {
      try {
        KeyValue record = new KeyValue();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.Integer) defaultValue(fields()[0]);
        record.month = fieldSetFlags()[1] ? this.month : (java.lang.Integer) defaultValue(fields()[1]);
        record.day = fieldSetFlags()[2] ? this.day : (java.lang.Integer) defaultValue(fields()[2]);
        record.key = fieldSetFlags()[3] ? this.key : (java.lang.Integer) defaultValue(fields()[3]);
        record.value = fieldSetFlags()[4] ? this.value : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
